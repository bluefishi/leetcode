/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // Start typing your Java solution below
        // DO NOT write main() function
        if(preorder == null || inorder == null || preorder.length == 0 || inorder.length == 0)
            return null;
        if(preorder.length != inorder.length) return null;
        
        TreeNode root =  new TreeNode(0);
        int rootvalue = preorder[0];
        root.val = rootvalue;
        int leftlen = 0;
        int rightlen = 0;
        for(int i =0;i<inorder.length;i++)
        {
            if(inorder[i] == rootvalue)
            {
                leftlen=i;
                rightlen = inorder.length-i-1;
                break;
            }
        }
        int[] lpreorder = new int[leftlen];
        int[] linorder = new int[leftlen];
        int[] rpreorder = new int[rightlen];
        int[] rinorder = new int[rightlen];
        
        int k=0;
        int m = 0;
        for(int i =1;i<=leftlen;i++)
        {
            lpreorder[k++]=preorder[i];
        }
        for(int i=leftlen+1;i<preorder.length;i++)
        {
            rpreorder[m++] = preorder[i];
        }
        for(int i=0;i<leftlen;i++)
        {
            linorder[i] = inorder[i];
        }
        for(int i = leftlen+1;i<inorder.length;i++)
        {
            rinorder[i-leftlen-1]=inorder[i];
        }
        
        root.left = buildTree(lpreorder,linorder);
        root.right = buildTree(rpreorder,rinorder);
        return root;
        
    }
}


/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(inorder ==null || preorder == null || preorder.length != inorder.length)
            return null;
        int length = inorder.length;
        if(length == 0) return null;
        return buildTree(preorder,0,inorder,0,length);
    }
    TreeNode buildTree(int[] preorder,int pbegin,int[] inorder,int ibegin,int length)
    {
        if(length == 0 || ibegin >=inorder.length || pbegin >=preorder.length)
            return null;
        TreeNode root = new TreeNode(0);
        root.val = preorder[pbegin];
        int left_size = 0;
        for(int i = ibegin ;i<ibegin + length;i++)
        {
            if(inorder[i]==root.val)
            {
                left_size = i-ibegin;
                break;
            }
        }
        root.left = buildTree(preorder,pbegin+1,inorder,ibegin,left_size);
        root.right = buildTree(preorder,pbegin+left_size+1,inorder,ibegin+left_size+1,length-left_size-1);
        return root;
    }
}
